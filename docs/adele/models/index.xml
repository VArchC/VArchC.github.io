<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Models and Abstractions on VArchC</title>
    <link>/docs/adele/models/</link>
    <description>Recent content in Models and Abstractions on VArchC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2019 13:09:00 -0300</lastBuildDate>
    
	<atom:link href="/docs/adele/models/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Group Abstraction</title>
      <link>/docs/adele/models/group/</link>
      <pubDate>Sat, 09 Nov 2019 12:18:00 -0300</pubDate>
      
      <guid>/docs/adele/models/group/</guid>
      <description>The Group abstraction allows distinct instructions to be grouped together arbitrarily in one single entity. This entity can be used to define approximations, energy models, and operating parameters at once, with no need to rewrite the definition of the group.
The code snippet bellow exemplifies the definition of the group ALU, that contains some basic logic and arithmetic instructions.
group ALU { instruction = { add, addu, sub, subu, and, and, or, not }; }  Additionally to defining the specific instructions that are part of a group, the group abstraction also allows that these instructions are subject to different energy models and operating parameters.</description>
    </item>
    
    <item>
      <title>The Approximation Abstraction</title>
      <link>/docs/adele/models/approximation/</link>
      <pubDate>Thu, 20 Sep 2018 11:12:00 -0300</pubDate>
      
      <guid>/docs/adele/models/approximation/</guid>
      <description>The Approximation abstraction describes an approximate state of the simulated CPU, and what is the expected behavior of instructions and memory operations when the execution activates this state.
The code snippet below describes an example approximation STATE_A.
approximation STATE_A { initial = on; pre_behavior = TraceState(&amp;quot;A&amp;quot;); instruction mult { parameters = set_C; alt_behavior = ApproxMult(RB[rd], RB[rs], RB[rt]); }; group VECTOR { parameters = set_D; regbank_write = RandomFlip(); probability = VectorProbability(); }; }  This description is interpreted as, in the order that the declarations are written:</description>
    </item>
    
    <item>
      <title>The Word Abstraction</title>
      <link>/docs/adele/models/word/</link>
      <pubDate>Tue, 29 Oct 2019 12:19:20 -0300</pubDate>
      
      <guid>/docs/adele/models/word/</guid>
      <description>The word abstraction represents every data or address word within a target architecture. That means, in a 32-bit CPU model the word data type will map to a 32-bit value, while in a 64-bit architecture it will map to a 64-bit value.
The word abstraction allows Instruction models to be independent of data word length in a target architecture, since they can deal with parameters of type word. More than that, the word abstraction also implements overloaded operators for read and write operations, so that the appropriate Data Modifiers are applied.</description>
    </item>
    
    <item>
      <title>The Instruction Model</title>
      <link>/docs/adele/models/instruction/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/instruction/</guid>
      <description>The Instruction Model is the main abstraction to define what is the behavior that a given approximation has in the target application. When the architecture simulator, while running an application, decodes an instruction, it checks for the activated Instruction Models to look for what it should do. There are two types of instruction models: implementation modifiers and data modifiers.
Implementation modifiers Implementation modifiers directly affect the operation an instruction executes.</description>
    </item>
    
    <item>
      <title>The Energy Model</title>
      <link>/docs/adele/models/energy/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/energy/</guid>
      <description>The energy model is used by VArchC to compute the energy cost of each single instruction execution. It is a C++ method that returns a double-precision floating-point value (double), which is the energy consumption. An energy model will be called upon execution of every instruction in a test application.
The complexity of an energy model depends on the required accuracy of energy computation. One simple alternative to compute average relative energy is to use a scaling factor.</description>
    </item>
    
    <item>
      <title>The Probability Model</title>
      <link>/docs/adele/models/probability/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/probability/</guid>
      <description>A probability model is a C++ method that return a boolean value indicating if the approximation it was instantiated on should be executed or not. If a probability model returns true, the instruction and energy models instantiated for the given instruction will be run. Otherwise, the execution will follow its normal flow, not considering any approximated state.
Probability models are used mostly with probabilistic approximations. For example, consider that an architecture contains a first level cache memory supplied by an adjustable supply voltage.</description>
    </item>
    
    <item>
      <title>The Operating Parameters</title>
      <link>/docs/adele/models/op/</link>
      <pubDate>Thu, 31 Oct 2019 13:43:00 -0300</pubDate>
      
      <guid>/docs/adele/models/op/</guid>
      <description>The Operating Parameters are a global data structure that encode parameters of the target simulated CPU. They are defined in dictionary-like sets containing double-precision floating-point values representing, for example, physical conditions of the target hardware such as voltage or frequency, simulation-specific values such as a per-instruction energy increment or fixed error probabilities, or any other pre-defined numeric value.
Operating parameters may be implemented as default values for the whole system, as initial values for specific groups of instructions, or as values activated dinamically according to the approximate state of the target CPU.</description>
    </item>
    
  </channel>
</rss>