<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VArchC</title>
    <link>/</link>
    <description>Recent content on VArchC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Nov 2019 12:18:00 -0300</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Group Abstraction</title>
      <link>/docs/adele/models/group/</link>
      <pubDate>Sat, 09 Nov 2019 12:18:00 -0300</pubDate>
      
      <guid>/docs/adele/models/group/</guid>
      <description>The Group abstraction allows distinct instructions to be grouped together arbitrarily in one single entity. This entity can be used to define approximations, energy models, and operating parameters at once, with no need to rewrite the definition of the group.
The code snippet bellow exemplifies the definition of the group ALU, that contains some basic logic and arithmetic instructions.
group ALU { instruction = { add, addu, sub, subu, and, and, or, not }; }  Additionally to defining the specific instructions that are part of a group, the group abstraction also allows that these instructions are subject to different energy models and operating parameters.</description>
    </item>
    
    <item>
      <title>Introduction to VArchC</title>
      <link>/docs/introduction/</link>
      <pubDate>Sat, 15 Sep 2018 10:41:40 -0300</pubDate>
      
      <guid>/docs/introduction/</guid>
      <description>What is VArchC? VArchC is a framework specially designed to represent computer architectures subjected to Approximate Computing. VArchC works as an extension to the ArchC Architecture Description Language, enabling its tools to automatically generate processor models that implement approximation techniques. Using VArchC, all a designer needs to inject approximations in a target architecture is an ArchC CPU model, specific high-level software models of the desired approximation behaviors, and a high-level configuration file that links them.</description>
    </item>
    
    <item>
      <title>The Approximation Abstraction</title>
      <link>/docs/adele/models/approximation/</link>
      <pubDate>Thu, 20 Sep 2018 11:12:00 -0300</pubDate>
      
      <guid>/docs/adele/models/approximation/</guid>
      <description>The Approximation abstraction describes an approximate state of the simulated CPU, and what is the expected behavior of instructions and memory operations when the execution activates this state.
The code snippet below describes an example approximation STATE_A.
approximation STATE_A { initial = on; pre_behavior = TraceState(&amp;quot;A&amp;quot;); instruction mult { parameters = set_C; alt_behavior = ApproxMult(RB[rd], RB[rs], RB[rt]); }; group VECTOR { parameters = set_D; regbank_write = RandomFlip(); probability = VectorProbability(); }; }  This description is interpreted as, in the order that the declarations are written:</description>
    </item>
    
    <item>
      <title>The Word Abstraction</title>
      <link>/docs/adele/models/word/</link>
      <pubDate>Tue, 29 Oct 2019 12:19:20 -0300</pubDate>
      
      <guid>/docs/adele/models/word/</guid>
      <description>The word abstraction represents every data or address word within a target architecture. That means, in a 32-bit CPU model the word data type will map to a 32-bit value, while in a 64-bit architecture it will map to a 64-bit value.
The word abstraction allows Instruction models to be independent of data word length in a target architecture, since they can deal with parameters of type word. More than that, the word abstraction also implements overloaded operators for read and write operations, so that the appropriate Data Modifiers are applied.</description>
    </item>
    
    <item>
      <title>The Instruction Model</title>
      <link>/docs/adele/models/instruction/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/instruction/</guid>
      <description>The Instruction Model is the main abstraction to define what is the behavior that a given approximation has in the target application. When the architecture simulator, while running an application, decodes an instruction, it checks for the activated Instruction Models to look for what it should do. There are two types of instruction models: implementation modifiers and data modifiers.
Implementation modifiers Implementation modifiers directly affect the operation an instruction executes.</description>
    </item>
    
    <item>
      <title>ADeLe Design Overview</title>
      <link>/docs/adele/overview/</link>
      <pubDate>Thu, 20 Sep 2018 11:07:00 -0300</pubDate>
      
      <guid>/docs/adele/overview/</guid>
      <description>An ADeLe use case Our example targets a designer who wants to evaluate the impact of a new register bank design, powered by an adjustable supply voltage. In the typical hardware development flow, the designer would model the hardware using a Hardware Description Language (HDL), evaluate it in a Register Transfer Level (RTL) simulator and synthesize it to obtain power and timing data, back annotating this information to the netlist for further simulation.</description>
    </item>
    
    <item>
      <title>Installing VArchC</title>
      <link>/docs/installation/</link>
      <pubDate>Thu, 13 Sep 2018 15:24:38 -0300</pubDate>
      
      <guid>/docs/installation/</guid>
      <description>Dependencies  GNU autotools:
 m4 autoconf automake libtool  Build tools:
 GCC GNU Make  GNU Bison
 GNU Flex
 SystemC (installation steps included below)
  Build and Install  Create a directory to store VArchC and access it
 Build and install SystemC
wget http://www.accellera.org/images/downloads/standards/systemc/systemc-2.3.1.tgz tar -xvf systemc-2.3.1.tgz cd systemc-2.3.1 ./configure --prefix=$(pwd)/../SystemC/ make make install cd ../  Build and install ArchC
git clone https://github.</description>
    </item>
    
    <item>
      <title>The Energy Model</title>
      <link>/docs/adele/models/energy/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/energy/</guid>
      <description>The energy model is used by VArchC to compute the energy cost of each single instruction execution. It is a C++ method that returns a double-precision floating-point value (double), which is the energy consumption. An energy model will be called upon execution of every instruction in a test application.
The complexity of an energy model depends on the required accuracy of energy computation. One simple alternative to compute average relative energy is to use a scaling factor.</description>
    </item>
    
    <item>
      <title>The ADeLe Description File</title>
      <link>/docs/adele/adf/</link>
      <pubDate>Thu, 20 Sep 2018 11:07:00 -0300</pubDate>
      
      <guid>/docs/adele/adf/</guid>
      <description>Whoops! We are sorry this documentation page is not ready yet.
In the meantime, you may be interested in the ADeLe design overview, in a description example of a CPU Model, or in a more complete example.</description>
    </item>
    
    <item>
      <title>Generating a simulator</title>
      <link>/docs/simulator/</link>
      <pubDate>Thu, 20 Sep 2018 12:18:00 -0300</pubDate>
      
      <guid>/docs/simulator/</guid>
      <description>Whoops! We are sorry this documentation page is not ready yet.
In the meantime, you may be interested in a description example of a CPU Model or in a list of the currently supported ArchC models.</description>
    </item>
    
    <item>
      <title>The Probability Model</title>
      <link>/docs/adele/models/probability/</link>
      <pubDate>Thu, 20 Sep 2018 11:09:00 -0300</pubDate>
      
      <guid>/docs/adele/models/probability/</guid>
      <description>A probability model is a C++ method that return a boolean value indicating if the approximation it was instantiated on should be executed or not. If a probability model returns true, the instruction and energy models instantiated for the given instruction will be run. Otherwise, the execution will follow its normal flow, not considering any approximated state.
Probability models are used mostly with probabilistic approximations. For example, consider that an architecture contains a first level cache memory supplied by an adjustable supply voltage.</description>
    </item>
    
    <item>
      <title>The Operating Parameters</title>
      <link>/docs/adele/models/op/</link>
      <pubDate>Thu, 31 Oct 2019 13:43:00 -0300</pubDate>
      
      <guid>/docs/adele/models/op/</guid>
      <description>The Operating Parameters are a global data structure that encode parameters of the target simulated CPU. They are defined in dictionary-like sets containing double-precision floating-point values representing, for example, physical conditions of the target hardware such as voltage or frequency, simulation-specific values such as a per-instruction energy increment or fixed error probabilities, or any other pre-defined numeric value.
Operating parameters may be implemented as default values for the whole system, as initial values for specific groups of instructions, or as values activated dinamically according to the approximate state of the target CPU.</description>
    </item>
    
    <item>
      <title>AxRAM @ SBAC-PAD 2019</title>
      <link>/blog/sbesc2019/</link>
      <pubDate>Wed, 13 Nov 2019 13:59:00 -0300</pubDate>
      
      <guid>/blog/sbesc2019/</guid>
      <description>In 21 November 2019 we presented our first paper presenting the AxRAM data access interface for approximate memories, in our paper A Resilient Interface for Approximate Data Access.
Abstract Approximate memories offer lower energy cost while introducing errors to applications. If such errors affect essential parts of the application, the execution may fail, decreasing out- puts quality and energy savings. We present AxRAM, a memory architecture interface for approximate data that allows applica- tions to benefit from energy savings provided by approximate memories, while improving quality of results and failure rates.</description>
    </item>
    
    <item>
      <title>VArchC @ WSCAD 2018</title>
      <link>/blog/wscad2018/</link>
      <pubDate>Thu, 20 Sep 2018 13:37:00 -0300</pubDate>
      
      <guid>/blog/wscad2018/</guid>
      <description>In 1 October 2018 we presented our study on how approximated memories impact the energy efficiency of applications in various domains.
Abstract Approximate memories can lower energy consumption at expense of incurring errors in some of the read/write operations. While these errors may be tolerated in some cases, in general, parts of the application must be re-executed to achieve usable results when a large number of errors occur. Frequent re-executions may, in turn, attenuate or negate energy benefits obtained from using approximate memories.</description>
    </item>
    
    <item>
      <title>ADeLe @ SBAC-PAD 2018</title>
      <link>/blog/sbac-pad2018/</link>
      <pubDate>Thu, 20 Sep 2018 13:36:00 -0300</pubDate>
      
      <guid>/blog/sbac-pad2018/</guid>
      <description>In 25 September 2018 we presented our first paper presenting the ADeLe language and the VArchC framework. Our paper, ADeLe: Rapid Architectural Simulation for Approximate Hardware focuses on how our framework represents approximations in a high-level architecture level.
Abstract Recent research has introduced approximate hardware units that produce incorrect outputs deterministically or probabilistically for some small subset of inputs but allow significantly higher throughput or lower power than their error-free counterparts.</description>
    </item>
    
    <item>
      <title>This is VArchC</title>
      <link>/blog/first/</link>
      <pubDate>Thu, 20 Sep 2018 13:35:00 -0300</pubDate>
      
      <guid>/blog/first/</guid>
      <description>What is VArchC? VArchC is a framework specially designed to represent computer architectures subjected to Approximate Computing. VArchC works as an extension to the ArchC Architecture Description Language, enabling its tools to automatically generate processor models that implement approximation techniques. Using VArchC, alla designer needs to inject approximations in a target architecture is an ArchC CPU model, specific high-level software models of the desired approximation behaviors, and a high-level configuration file that links them.</description>
    </item>
    
    <item>
      <title>Running an application</title>
      <link>/docs/app/</link>
      <pubDate>Thu, 20 Sep 2018 12:25:00 -0300</pubDate>
      
      <guid>/docs/app/</guid>
      <description>Whoops! We are sorry this documentation page is not ready yet.
In the meantime, you may be interested in an example of a test application.</description>
    </item>
    
    <item>
      <title>Collecting energy statistics</title>
      <link>/docs/output/</link>
      <pubDate>Thu, 20 Sep 2018 12:27:00 -0300</pubDate>
      
      <guid>/docs/output/</guid>
      <description>Whoops! We are sorry this documentation page is not ready yet.
In the meantime, you may be interested in an example of a test application.</description>
    </item>
    
    <item>
      <title>Publications</title>
      <link>/publications/</link>
      <pubDate>Sat, 18 May 2019 11:07:00 -0300</pubDate>
      
      <guid>/publications/</guid>
      <description>Publications from our group 2020  ADeLe: A description language for approximate hardware
Isaías B. Felzmann, Matheus M. Susin, Liana Duenha, Rodolfo Azevedo and Lucas Wanner
Future Generation Computer Systems, volume 102, pp 245-258
BibTeX | PDF | DOI  2019  A Resilient Interface for Approximate Data Access
João Fabrício Filho, Isaías B. Felzmann, Rodolfo Azevedo and Lucas F. Wanner
IX Brazilian Symposium on Computing Systems Engineering &amp;ndash; SBESC 2019</description>
    </item>
    
  </channel>
</rss>