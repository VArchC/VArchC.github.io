<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on VArchC</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on VArchC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 16:05:00 -0300</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AxPIKE @ DATE 2021</title>
      <link>/blog/date2021/</link>
      <pubDate>Tue, 08 Dec 2020 16:05:00 -0300</pubDate>
      
      <guid>/blog/date2021/</guid>
      <description>Abstract Representing the interaction between accurate and approximate hardware modules at the architecture level is essential to understand the impact of Approximate Computing in a general-purpose computing scenario. However, extensive effort is required to model approximations into a baseline instruction-level simulator and collect its execution metrics. In this work, we present the AxPIKE ISA simulation environment, a tool that allows designers to inject models of hardware approximation at the instruction level and evaluate their impact on the quality of results.</description>
    </item>
    
    <item>
      <title>AxRAM @ SBESC 2019</title>
      <link>/blog/sbesc2019/</link>
      <pubDate>Wed, 13 Nov 2019 13:59:00 -0300</pubDate>
      
      <guid>/blog/sbesc2019/</guid>
      <description>In 21 November 2019 we presented our first paper presenting the AxRAM data access interface for approximate memories, in our paper A Resilient Interface for Approximate Data Access.
Abstract Approximate memories offer lower energy cost while introducing errors to applications. If such errors affect essential parts of the application, the execution may fail, decreasing out- puts quality and energy savings. We present AxRAM, a memory architecture interface for approximate data that allows applica- tions to benefit from energy savings provided by approximate memories, while improving quality of results and failure rates.</description>
    </item>
    
    <item>
      <title>VArchC @ WSCAD 2018</title>
      <link>/blog/wscad2018/</link>
      <pubDate>Thu, 20 Sep 2018 13:37:00 -0300</pubDate>
      
      <guid>/blog/wscad2018/</guid>
      <description>In 1 October 2018 we presented our study on how approximated memories impact the energy efficiency of applications in various domains.
Abstract Approximate memories can lower energy consumption at expense of incurring errors in some of the read/write operations. While these errors may be tolerated in some cases, in general, parts of the application must be re-executed to achieve usable results when a large number of errors occur. Frequent re-executions may, in turn, attenuate or negate energy benefits obtained from using approximate memories.</description>
    </item>
    
    <item>
      <title>ADeLe @ SBAC-PAD 2018</title>
      <link>/blog/sbac-pad2018/</link>
      <pubDate>Thu, 20 Sep 2018 13:36:00 -0300</pubDate>
      
      <guid>/blog/sbac-pad2018/</guid>
      <description>In 25 September 2018 we presented our first paper presenting the ADeLe language and the VArchC framework. Our paper, ADeLe: Rapid Architectural Simulation for Approximate Hardware focuses on how our framework represents approximations in a high-level architecture level.
Abstract Recent research has introduced approximate hardware units that produce incorrect outputs deterministically or probabilistically for some small subset of inputs but allow significantly higher throughput or lower power than their error-free counterparts.</description>
    </item>
    
    <item>
      <title>This is VArchC</title>
      <link>/blog/first/</link>
      <pubDate>Thu, 20 Sep 2018 13:35:00 -0300</pubDate>
      
      <guid>/blog/first/</guid>
      <description>What is VArchC? VArchC is a framework specially designed to represent computer architectures subjected to Approximate Computing. VArchC works as an extension to the ArchC Architecture Description Language, enabling its tools to automatically generate processor models that implement approximation techniques. Using VArchC, alla designer needs to inject approximations in a target architecture is an ArchC CPU model, specific high-level software models of the desired approximation behaviors, and a high-level configuration file that links them.</description>
    </item>
    
  </channel>
</rss>